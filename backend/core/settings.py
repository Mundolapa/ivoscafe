"""
Django settings for ivoscafe backend project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import datetime
import json
import os

import boto3
from django.utils.translation import gettext_lazy as _
from dotenv import load_dotenv
from prettyconf import config

# import logging

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

load_dotenv(verbose=True, dotenv_path=os.path.join(BASE_DIR, '.env'))

# Get secret key from AWS Secrets Manager
def get_secret(secret_name, region_name):
    session = boto3.session.Session()
    client = session.client(
        service_name='secretsmanager',
        region_name=region_name,
    )

    try:
        get_secret_value_response = client.get_secret_value(SecretId=secret_name)
    except Exception as e:
        raise e
    else:
        secret = get_secret_value_response['SecretString']
        return json.loads(secret)

# AWS Region Name (e.g. us-east-1) - Used for AWS Secrets Manager
AWS_REGION = 'us-east-1' # Used for SES, S3 and other AWS features

# SECURITY WARNING: DEVELOPMENT MODE ONLY! CHANGE TO FALSE FOR PRODUCTION!
DEV_MODE = False

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

if DEBUG:
    ALLOWED_HOSTS = [
        '127.0.0.1',
        'localhost',
        '.ivoscafe.com'
    ]
else:
    ALLOWED_HOSTS = [
        '.ivoscafe.com',
    ]

SITE_ID = 1

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    # Local apps
    'accounts',
    'api',
    'banners',
    'base',
    'file_management',
    'navsite',
    'products',
    # 'scheduler',
    'sliders',
    'timer',

    # Third party apps
    'ckeditor',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.twitter',
    'allauth.socialaccount.providers.google',
    'mptt',
    'parler',
    'django_apscheduler',
    'polymorphic',
    'corsheaders',
    'leaflet',
    'ordered_model',
    'storages',
]

MIDDLEWARE = [
    'middleware.health_check.HealthCheckMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
# Getting secrets for database
if DEV_MODE:
    db_secrets = {
        "dbname": config("DB_AWS_NAME"),
        "username": config("DB_AWS_USER"),
        "password": config("DB_AWS_PASSWORD"),
        "host": config("DB_AWS_HOST"),
        "port": config("DB_AWS_PORT")
    }
else:
    db_secrets = get_secret('IvosCafeDB', AWS_REGION)

if DEV_MODE:
    DATABASES = {
        'default': {
            'NAME': db_secrets['dbname'],
            'USER': db_secrets['username'],
            'PASSWORD': db_secrets['password'],
            'HOST': db_secrets['host'],
            'PORT': db_secrets['port'],
        },
        'local': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': config("DB_LOCAL_NAME"),
            'USER': config("DB_LOCAL_USER"),
            'PASSWORD': config("DB_LOCAL_PASSWORD"),
            'HOST': config("DB_LOCAL_HOST"),
            'PORT': '5432',
        },
        'test': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': config("DB_TEST_NAME"),
            'USER': config("DB_LOCAL_USER"),
            'PASSWORD': config("DB_LOCAL_PASSWORD"),
            'HOST': config("DB_LOCAL_HOST"),
            'PORT': '5432',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': db_secrets['dbname'],
            'USER': db_secrets['username'],
            'PASSWORD': db_secrets['password'],
            'HOST': db_secrets['host'],
            'PORT': db_secrets['port'],
        }
    }

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGES = [
    ('en', _('English')),
    ('es', _('Spanish')),
]

LANGUAGE_CODE = 'en'

TIME_ZONE = 'America/Tegucigalpa'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale')
]

PARLER_LANGUAGES = {
    1: (
        {'code': 'en', },  # English
        {'code': 'es', },  # Spanish
    ),
    'default': {
        'fallbacks': ['en'],
        'hide_untranslated': False,
    }
}

PARLER_ENABLE_CACHING = True
PARLER_DEFAULT_ACTIVATE = True
PARLER_SHOW_EXCLUDED_LANGUAGE_TABS = True

# custom
# LOGOUT_REDIRECT_URL = '/login/'
# LOGIN_REDIRECT_URL = 'base:index'
# LOGIN_URL = '/login/'
# LOGOUT_URL = '/logout/'
# LOGIN_ERROR_URL = '/login/'

####################################
#  AWS CONFIGURATION #
####################################
# Getting secrets for AWS
if DEV_MODE:
    app_secrets = {
        "secret_key": config("SECRET_KEY"),
        "access_key": config("AWS_ACCESS_KEY_ID"),
        "secret_access_key": config("AWS_SECRET_ACCESS_KEY"),
        "bucket_name": config("AWS_STORAGE_BUCKET_NAME")
    }
else:
    app_secrets = get_secret('IvosKeys', AWS_REGION)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = app_secrets['secret_key']

# AWS settings
AWS_ACCESS_KEY_ID = app_secrets['access_key']
AWS_SECRET_ACCESS_KEY = app_secrets['secret_access_key']

# S3 settings
AWS_STORAGE_BUCKET_NAME = app_secrets['bucket_name']
AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None

# Storage settings for static files and media
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# SES settings
EMAIL_BACKEND = 'django_ses.SESBackend'
AWS_SES_REGION_NAME = AWS_REGION
AWS_SES_REGION_ENDPOINT = f'email.{AWS_SES_REGION_NAME}.amazonaws.com'


# BASE_URL = 'https://ivoscafe.com/'
# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = f'https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

####################################
#  EMAIL CUSTOM CONFIGURATION #
####################################
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_USE_TLS = True
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
# EMAIL_PORT = 587
# PASSWORD_RESET_TIMEOUT_DAYS = 2

####################################
#  CKEDITOR CONFIGURATION #
####################################
CKEDITOR_JQUERY_URL = 'https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js'

CKEDITOR_UPLOAD_PATH = 'images/'
CKEDITOR_IMAGE_BACKEND = "pillow"

CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'Custom',
        'toolbar_Custom': [
            ['Bold', 'Italic'],
            ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],
            ['Link', 'Unlink'],
            ['RemoveFormat', 'Source']
        ]
    },
}

####################################
#  REST FRAMEWORK CONFIG #
####################################

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        # "rest_framework.authentication.SessionAuthentication",
        # "rest_framework_simplejwt.authentication.JWTAuthentication",
        'dj_rest_auth.jwt_auth.JWTCookieAuthentication',
        # "api.authentication.TokenAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticatedOrReadOnly"
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 10
}

AUTHENTICATION_BACKENDS = (
    # "rest_framework.authentication.SessionAuthentication",
    # 'dj_rest_auth.jwt_auth.JWTCookieAuthentication',
    "allauth.account.auth_backends.AuthenticationBackend",
    "django.contrib.auth.backends.ModelBackend",
    # "rest_framework_simplejwt.authentication.JWTAuthentication",
    # "api.authentication.TokenAuthentication",
)

SIMPLE_JWT = {
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    "AUTH_HEADER_TYPES": ["Bearer"],
    "ACCESS_TOKEN_LIFETIME": datetime.timedelta(minutes=1),  # minutes=15
    "REFRESH_TOKEN_LIFETIME": datetime.timedelta(days=14),  # days=14
    "ROTATE_REFRESH_TOKENS": True,
    'BLACKLIST_AFTER_ROTATION': True,
}

####################################
#  DJ REST AUTH CONFIGURATION #
####################################
REST_AUTH = {
    'USE_JWT': True,
    'SESSION_LOGIN': False,
    'JWT_AUTH_COOKIE': 'jwt-auth',
    'JWT_AUTH_REFRESH_COOKIE': 'jwt-refresh-auth',
    'JWT_AUTH_HTTPONLY': False,
    # 'LOGIN_SERIALIZER': 'accounts.serializers.LoginSerializer',
    'REGISTER_SERIALIZER': 'accounts.serializers.CustomRegisterSerializer',
}

####################################
#  ALLAUTH CONFIGURATION #
####################################
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'

####################################
#  SCHEDULER CONFIG #
####################################

SCHEDULER_AUTOSTART = True

SCHEDULER_RUN_AT_TIMES = [
    '00:00',
    '12:00',
]

SCHEDULER_TIMEZONE = 'America/Tegucigalpa'

####################################
#  CORS CONFIGURATION #
####################################


if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True
    CSRF_TRUSTED_ORIGINS = [
        "http://localhost:3000",
        "http://backend.ivoscafe.com",
        "https://backend.ivoscafe.com",
    ]
else:
    CORS_ALLOWED_ORIGINS = [
        "http://ivoscafe.com",
        "http://www.ivoscafe.com",
        "https://ivoscafe.com",
        "https://www.ivoscafe.com",
        "http://backend.ivoscafe.com",
        "https://backend.ivoscafe.com",
    ]
    CSRF_TRUSTED_ORIGINS = [
        "http://ivoscafe.com",
        "http://www.ivoscafe.com",
        "https://ivoscafe.com",
        "https://www.ivoscafe.com",
        "http://backend.ivoscafe.com",
        "https://backend.ivoscafe.com",
    ]

####################################
#  LOGGING CONFIGURATION #
####################################
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#         },
#         'file': {
#             'level': 'ERROR',
#             'class': 'logging.FileHandler',
#             'filename': 'debug.log',
#         },
#     },
#     'root': {
#         'handlers': ['console', 'file'],
#         'level': 'INFO',
#     }
# }
